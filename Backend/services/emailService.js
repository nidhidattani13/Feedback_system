import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

// Create transporter
const createTransporter = () => {
  return nodemailer.createTransporter({
    service: process.env.EMAIL_SERVICE || 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
    }
  });
};

// Send monthly report email to HOD
export const sendMonthlyReportEmail = async (hodEmail, subject, month, year, startDate, endDate) => {
  try {
    const transporter = createTransporter();
    
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];

    const monthName = monthNames[month - 1];
    
    const emailContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background-color: #f8f9fa; padding: 20px; text-align: center; }
            .content { padding: 20px; }
            .summary { background-color: #e9ecef; padding: 15px; margin: 15px 0; border-radius: 5px; }
            .footer { background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
            .metric { display: inline-block; margin: 10px; padding: 10px; background-color: white; border-radius: 5px; min-width: 120px; text-align: center; }
            .metric-value { font-size: 24px; font-weight: bold; color: #007bff; }
            .metric-label { font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>üìä Monthly Academic Report</h1>
            <h2>${subject.name} (${subject.code})</h2>
            <p><strong>Period:</strong> ${monthName} ${year}</p>
            <p><strong>Date Range:</strong> ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}</p>
          </div>
          
          <div class="content">
            <h3>üìã Report Summary</h3>
            <p>This is your monthly academic observation report for ${subject.name}. The report contains comprehensive data about student feedback, assessment completion, and academic event verification.</p>
            
            <div class="summary">
              <h4>üîç Key Metrics</h4>
              <div class="metric">
                <div class="metric-value">üìö</div>
                <div class="metric-label">Subject</div>
              </div>
              <div class="metric">
                <div class="metric-value">üìÖ</div>
                <div class="metric-label">${monthName} ${year}</div>
              </div>
              <div class="metric">
                <div class="metric-value">üìä</div>
                <div class="metric-label">Report Generated</div>
              </div>
            </div>
            
            <h3>üìñ What's Included</h3>
            <ul>
              <li><strong>Daily Feedback Analysis:</strong> Student ratings and comments on lectures and faculty</li>
              <li><strong>Assessment Verification:</strong> Completion status of planned assessments</li>
              <li><strong>Academic Events:</strong> Status of scheduled academic activities</li>
              <li><strong>Faculty Performance:</strong> Individual faculty member performance metrics</li>
              <li><strong>Trends & Insights:</strong> Patterns and recommendations for improvement</li>
            </ul>
            
            <h3>üöÄ Next Steps</h3>
            <p>Please review this report and consider the following actions:</p>
            <ol>
              <li>Analyze feedback trends and identify areas for improvement</li>
              <li>Review assessment completion rates and address any issues</li>
              <li>Evaluate faculty performance and provide support where needed</li>
              <li>Plan improvements for the upcoming month</li>
            </ol>
            
            <p><strong>Note:</strong> Detailed data and analytics are available in the system dashboard.</p>
          </div>
          
          <div class="footer">
            <p>This is an automated report generated by the Academic Observation Module</p>
            <p>Generated on: ${new Date().toLocaleString()}</p>
          </div>
        </body>
      </html>
    `;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: hodEmail,
      subject: `Monthly Academic Report - ${subject.name} (${monthName} ${year})`,
      html: emailContent
    };

    const result = await transporter.sendMail(mailOptions);
    
    console.log('‚úÖ Monthly report email sent successfully to:', hodEmail);
    
    return {
      success: true,
      messageId: result.messageId,
      to: hodEmail,
      subject: mailOptions.subject
    };
  } catch (error) {
    console.error('‚ùå Error sending monthly report email:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Send notification email for pending feedback
export const sendFeedbackReminderEmail = async (studentEmail, studentName, subjectName, dueDate) => {
  try {
    const transporter = createTransporter();
    
    const emailContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background-color: #fff3cd; padding: 20px; text-align: center; border: 1px solid #ffeaa7; }
            .content { padding: 20px; }
            .reminder { background-color: #fff3cd; padding: 15px; margin: 15px 0; border-radius: 5px; border-left: 4px solid #ffc107; }
            .footer { background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>‚è∞ Feedback Reminder</h1>
            <p>Don't forget to submit your daily feedback!</p>
          </div>
          
          <div class="content">
            <h3>Hello ${studentName},</h3>
            
            <div class="reminder">
              <h4>üìù Pending Feedback Submission</h4>
              <p><strong>Subject:</strong> ${subjectName}</p>
              <p><strong>Due Date:</strong> ${dueDate}</p>
              <p><strong>Status:</strong> <span style="color: #dc3545;">Pending</span></p>
            </div>
            
            <p>This is a friendly reminder that you have not yet submitted your daily feedback for today's lecture. Your feedback is important for:</p>
            <ul>
              <li>Improving teaching quality</li>
              <li>Enhancing learning experience</li>
              <li>Supporting faculty development</li>
              <li>Maintaining academic standards</li>
            </ul>
            
            <p><strong>Please log into the system and submit your feedback as soon as possible.</strong></p>
            
            <p>Thank you for your participation!</p>
          </div>
          
          <div class="footer">
            <p>Academic Observation Module - Feedback System</p>
            <p>Generated on: ${new Date().toLocaleString()}</p>
          </div>
        </body>
      </html>
    `;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: studentEmail,
      subject: `Feedback Reminder - ${subjectName}`,
      html: emailContent
    };

    const result = await transporter.sendMail(mailOptions);
    
    console.log('‚úÖ Feedback reminder email sent successfully to:', studentEmail);
    
    return {
      success: true,
      messageId: result.messageId,
      to: studentEmail,
      subject: mailOptions.subject
    };
  } catch (error) {
    console.error('‚ùå Error sending feedback reminder email:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Send notification email for assessment updates
export const sendAssessmentUpdateEmail = async (facultyEmail, facultyName, assessmentType, topic, status) => {
  try {
    const transporter = createTransporter();
    
    const statusColors = {
      'completed': '#28a745',
      'cancelled': '#dc3545',
      'planned': '#007bff'
    };
    
    const emailContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background-color: #f8f9fa; padding: 20px; text-align: center; }
            .content { padding: 20px; }
            .update { background-color: #e9ecef; padding: 15px; margin: 15px 0; border-radius: 5px; }
            .footer { background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>üìã Assessment Update Notification</h1>
            <p>Your assessment plan has been updated</p>
          </div>
          
          <div class="content">
            <h3>Hello ${facultyName},</h3>
            
            <div class="update">
              <h4>Assessment Plan Update</h4>
              <p><strong>Type:</strong> ${assessmentType}</p>
              <p><strong>Topic:</strong> ${topic}</p>
              <p><strong>New Status:</strong> <span style="color: ${statusColors[status] || '#666'}; font-weight: bold;">${status}</span></p>
              <p><strong>Updated on:</strong> ${new Date().toLocaleString()}</p>
            </div>
            
            <p>Your assessment plan has been updated. Please review the changes and take any necessary actions.</p>
            
            <p>If you have any questions or need to make further modifications, please log into the system.</p>
          </div>
          
          <div class="footer">
            <p>Academic Observation Module - Assessment Management</p>
            <p>Generated on: ${new Date().toLocaleString()}</p>
          </div>
        </body>
      </html>
    `;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: facultyEmail,
      subject: `Assessment Update - ${assessmentType}: ${topic}`,
      html: emailContent
    };

    const result = await transporter.sendMail(mailOptions);
    
    console.log('‚úÖ Assessment update email sent successfully to:', facultyEmail);
    
    return {
      success: true,
      messageId: result.messageId,
      to: facultyEmail,
      subject: mailOptions.subject
    };
  } catch (error) {
    console.error('‚ùå Error sending assessment update email:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Send bulk notification emails
export const sendBulkNotificationEmails = async (recipients, subject, content, type = 'general') => {
  try {
    const transporter = createTransporter();
    const results = [];
    
    for (const recipient of recipients) {
      try {
        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: recipient.email,
          subject: subject,
          html: content
        };

        const result = await transporter.sendMail(mailOptions);
        results.push({
          success: true,
          email: recipient.email,
          messageId: result.messageId
        });
      } catch (error) {
        results.push({
          success: false,
          email: recipient.email,
          error: error.message
        });
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    const failureCount = results.filter(r => !r.success).length;
    
    console.log(`‚úÖ Bulk email sent: ${successCount} successful, ${failureCount} failed`);
    
    return {
      success: true,
      total: recipients.length,
      successful: successCount,
      failed: failureCount,
      results
    };
  } catch (error) {
    console.error('‚ùå Error sending bulk notification emails:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

export default {
  sendMonthlyReportEmail,
  sendFeedbackReminderEmail,
  sendAssessmentUpdateEmail,
  sendBulkNotificationEmails
}; 